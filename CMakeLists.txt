CMAKE_MINIMUM_REQUIRED(VERSION 2.8.0)
PROJECT(duckos C CXX ASM)

SET(TOOLCHAIN_ROOT_DIR ${CMAKE_SOURCE_DIR}/toolchain/tools)
set(TOOLCHAIN_BIN_DIR ${TOOLCHAIN_ROOT_DIR}/bin/)
set(TOOLCHAIN_PLATFORM i686-pc-duckos)
set(TOOLCHAIN_PREFIX ${TOOLCHAIN_PLATFORM}-)

set(GCC_VER 9.3.0)

set(CMAKE_C_COMPILER ${TOOLCHAIN_BIN_DIR}${TOOLCHAIN_PREFIX}gcc)
set(CMAKE_CXX_COMPILER ${TOOLCHAIN_BIN_DIR}${TOOLCHAIN_PREFIX}g++)
set(CMAKE_LINKER ${TOOLCHAIN_BIN_DIR}${TOOLCHAIN_PREFIX}ld)
set(CMAKE_ASM_COMPILER ${TOOLCHAIN_BIN_DIR}${TOOLCHAIN_PREFIX}gcc)
set(CMAKE_STRIP ${TOOLCHAIN_BIN_DIR}${TOOLCHAIN_PREFIX}strip)
set(CMAKE_AR ${TOOLCHAIN_BIN_DIR}${TOOLCHAIN_PREFIX}ar)
set(CMAKE_RANLIB ${TOOLCHAIN_BIN_DIR}${TOOLCHAIN_PREFIX}ranlib)

set(CMAKE_STAGING_PREFIX ${CMAKE_BINARY_DIR}/root)
set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/root)
set(CMAKE_INSTALL_DATAROOTDIR ${CMAKE_BINARY_DIR}/root/res)

set(CMAKE_SHARED_LIBRARY_SUFFIX ".so")
set(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS "-shared")
set(CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS "-shared")
set(BUILD_SHARED_LIBS ON)
SET(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "")
SET(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS "")

set(CMAKE_CXX_STANDARD 17)

function(MAKE_LIBRARY LIBNAME)
    # Install dynamic library
    ADD_LIBRARY(${LIBNAME} ${SOURCES})
    INSTALL(TARGETS ${LIBNAME} LIBRARY DESTINATION usr/lib)
    SET_TARGET_PROPERTIES(${LIBNAME} PROPERTIES PREFIX "")

    # Install static library
    ADD_LIBRARY(${LIBNAME}_static STATIC ${SOURCES})
    INSTALL(TARGETS ${LIBNAME}_static LIBRARY DESTINATION usr/lib)
    SET_TARGET_PROPERTIES(${LIBNAME}_static PROPERTIES PREFIX "")

    # Install headers
    FILE(GLOB_RECURSE LIBHEADERS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "*.h")
    foreach(HEADER ${LIBHEADERS})
        GET_FILENAME_COMPONENT(SUBDIRECTORY ${HEADER} DIRECTORY)
        install(FILES ${HEADER} DESTINATION usr/include/${LIBNAME}/${SUBDIRECTORY})
    endforeach()
endfunction()

function(MAKE_PROGRAM PROGNAME)
    ADD_EXECUTABLE(${PROGNAME} ${SOURCES})
    INSTALL(TARGETS ${PROGNAME} RUNTIME DESTINATION bin)
endfunction()

INCLUDE_DIRECTORIES(libraries/)
INCLUDE_DIRECTORIES(libraries/libc)
INCLUDE_DIRECTORIES(.)
include_directories(${TOOLCHAIN_ROOT_DIR}/${TOOLCHAIN_PLATFORM}/include/c++/${GCC_VER}/)
include_directories(${TOOLCHAIN_ROOT_DIR}/${TOOLCHAIN_PLATFORM}/include/c++/${GCC_VER}/${TOOLCHAIN_PLATFORM}/)

LINK_DIRECTORIES(${TOOLCHAIN_ROOT_DIR}/lib/gcc/${TOOLCHAIN_PLATFORM}/${GCC_VER}/)
LINK_DIRECTORIES(${TOOLCHAIN_ROOT_DIR}/${TOOLCHAIN_PLATFORM}/lib/)

ADD_SUBDIRECTORY(kernel/)
ADD_SUBDIRECTORY(libraries/)
ADD_SUBDIRECTORY(services/)
ADD_SUBDIRECTORY(programs/)
ADD_SUBDIRECTORY(ports/)

ADD_CUSTOM_TARGET(image
        COMMAND ${CMAKE_COMMAND} -E env "SOURCE_DIR=${CMAKE_SOURCE_DIR}" ${CMAKE_SOURCE_DIR}/scripts/image.sh $(IMAGE_DEV)
        BYPRODUCTS ${CMAKE_BINARY_DIR}/duckOS.img
        USES_TERMINAL
)

ADD_CUSTOM_TARGET(base-system
        COMMAND ${CMAKE_COMMAND} -E env "SOURCE_DIR=${CMAKE_SOURCE_DIR}" ${CMAKE_SOURCE_DIR}/scripts/base-system.sh $(ROOT_DIR)
        USES_TERMINAL
)

ADD_CUSTOM_TARGET(qemu-kernel
        COMMAND ${CMAKE_SOURCE_DIR}/scripts/qemu-kernel.sh
        USES_TERMINAL
)

ADD_CUSTOM_TARGET(qemu-image
        COMMAND ${CMAKE_SOURCE_DIR}/scripts/qemu-image.sh
        USES_TERMINAL
)
